# Multiple Linear Regression

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset

train= pd.read_csv('loan_data_train.csv')
test = pd.read_csv('loan_data_test.csv')
#
#names_train=np.array(train.columns)
#names_test=np.array(test.columns)
#
#print('Column missing in Test set:',','.join(set(names_train).difference(names_test)))


names_train=(train.columns)
names_test=(test.columns)

list(filter(lambda x: x not in names_test,names_train))


test['Interest.Rate']= 'NA'
train['Data']='train'
test['Data']='test'

ds=pd.concat([train,test])
ds.info()
#ds['Amount.Funded.By.Investors']=pd.to_numeric(ds['Amount.Funded.By.Investors'], downcast='float')

ds['Amount.Funded.By.Investors']=pd.to_numeric(ds['Amount.Funded.By.Investors'].str.replace('.','')
, downcast='float')
ds.info()


ds['Amount.Requested']=pd.to_numeric(ds['Amount.Requested'].str.replace('.',''), downcast='integer')
ds.info()

ds['Debt.To.Income.Ratio']=pd.to_numeric(ds['Debt.To.Income.Ratio'].str.replace('%',''), downcast='float')
ds.info()

ds['Employment.Length'].value_counts()


for i in range(len(ds['Employment.Length'])):
  ds['Employment.Length']= ds['Employment.Length'].str.replace('years','')
  ds['Employment.Length']= ds['Employment.Length'].str.replace('year','')
  ds['Employment.Length']= ds['Employment.Length'].str.replace('10\\+','10')
  ds['Employment.Length']= ds['Employment.Length'].str.replace('.','')
  ds['Employment.Length']= ds['Employment.Length'].str.replace('< 1','0')

ds['Employment.Length'].value_counts() 
ds['Employment.Length']= pd.to_numeric(ds['Employment.Length'], downcast='integer')
ds.info()

ds[['f1','f2']]=ds['FICO.Range'].str.split('-',expand=True)
ds['f1']= pd.to_numeric(ds['f1'], downcast='integer')
ds['f2']= pd.to_numeric(ds['f2'], downcast='integer')
ds['Fico']=0.5*(ds['f1']+ds['f2'])

ds.info()
drop_cols=['f1','f2','ID','FICO.Range']
ds.drop(drop_cols,axis=1,inplace=True)
ds.info()

#ds['Interest.Rate']=pd.to_numeric(ds['Interest.Rate'].str.replace('%',''), downcast='float')

for i in range(len(ds['Interest.Rate'])):
  ds['Interest.Rate']= ds['Interest.Rate'].str.replace('NA','')
  ds['Interest.Rate']= ds['Interest.Rate'].str.replace('%','')
  
ds['Interest.Rate']=pd.to_numeric(ds['Interest.Rate'], downcast='float')
ds.info()

ds['Open.CREDIT.Lines']=pd.to_numeric(ds['Open.CREDIT.Lines'].str.replace('.',''),downcast='integer')
ds.info()

ds['Revolving.CREDIT.Balance']=pd.to_numeric(ds['Revolving.CREDIT.Balance'].str.replace('.',''),downcast='integer')
ds.info()

ds['Loan.Length'].value_counts()
ds['Loan.Length']=ds['Loan.Length'].replace('.',np.nan)
ds['Loan.Length'].isnull().sum()

from sklearn.impute import SimpleImputer# new codes
si=SimpleImputer(missing_values=np.nan,strategy='most_frequent')#'mean', “median”, “most_frequent”,“constant”
si=si.fit(ds[['Loan.Length']])# [[]] because simple imputer takes data frame as input
ds['Loan.Length']=si.transform(ds[['Loan.Length']])

ds['Loan.Length'].value_counts()

ds['Home.Ownership'].value_counts()
ds['Home.Ownership'].isnull().sum()

si=SimpleImputer(missing_values=np.nan,strategy='most_frequent')#'mean', “median”, “most_frequent”,“constant”
si=si.fit(ds[['Home.Ownership']])# [[]] because simple imputer takes data frame as input
ds['Home.Ownership']=si.transform(ds[['Home.Ownership']])


ds=pd.get_dummies(ds,columns=['Loan.Length','Home.Ownership'],drop_first=True)
ds.info()

ds['State'].value_counts()
ds['State']=ds['State'].replace('.',np.nan)
ds['State'].isnull().sum()

from sklearn.impute import SimpleImputer# new codes
si=SimpleImputer(missing_values=np.nan,strategy='most_frequent')#'mean', “median”, “most_frequent”,“constant”
si=si.fit(ds[['State']])
ds['State']=si.transform(ds[['State']])

ds['State'].value_counts()
ds['Loan.Purpose'].value_counts()
ds['Loan.Purpose'].isnull().sum()

from sklearn.impute import SimpleImputer# new codes
si=SimpleImputer(missing_values=np.nan,strategy='most_frequent')#'mean', “median”, “most_frequent”,“constant”
si=si.fit(ds[['Loan.Purpose']])
ds['Loan.Purpose']=si.transform(ds[['Loan.Purpose']])

ds=pd.get_dummies(ds,columns=['State','Loan.Purpose'],drop_first=True)
ds.info()

# All variables are converted to numeric

# Check on null
ds.isnull().sum()

null_variables=['Amount.Funded.By.Investors','Amount.Requested','Debt.To.Income.Ratio','Employment.Length',
                'Inquiries.in.the.Last.6.Months','Monthly.Income','Open.CREDIT.Lines',
                'Revolving.CREDIT.Balance']

from sklearn.impute import SimpleImputer# new codes
si=SimpleImputer(missing_values=np.nan,strategy='mean')
si=si.fit(ds[null_variables])
ds[null_variables]=si.transform(ds[null_variables])

ds.isnull().sum()

# Data is splitted into train and test

ds_train=ds[ds['Data']=='train']# filtering happens with rows
ds_test=ds[ds['Data']=='test']

ds_train.drop('Data',axis=1,inplace=True)
ds_test.drop('Data',axis=1,inplace=True)

ds_train.info()

X_train=ds_train.loc[:, ds_train.columns != 'Interest.Rate']
y_train=ds_train['Interest.Rate']

X_test=ds_test.loc[:, ds_test.columns != 'Interest.Rate']
y_test=ds_test['Interest.Rate']
